// Numbers as bistrings (leftmost is least significant).
T Bits
| bn;
| b0(pred: Bits);
| b1(pred: Bits);

// Identity on Bits.
id(bs: Bits): Bits
  case bs:
  | bn => bn;
  | b0 => b0(id(bs.pred));
  | b1 => b1(id(bs.pred));

// Increments a bit-string by 1. Lambdas lifted for fusion.
inc(bs: Bits): Bits
  <P> (bn, b0, b1)
  case bs:
  | bn => bn;
  | b0 => b1(bs.pred);
  | b1 => b0(inc(bs.pred));
  : P(inc(bs.self));

// Applies a function n times repeatedly to an argument
repeat(bs: Bits)<P: Type>(s: P -> P, z: P): P
  case bs:
  with s:_ = s;
  with z:_ = z;
  | bn => z;
  | b0 => repeat(bs.pred)<P>((x) s(s(x)), z);
  | b1 => repeat(bs.pred)<P>((x) s(s(x)), s(z));

// Adds two Bits by using repeated incs
add(a: Bits, b: Bits): Bits
  repeat(a)<Bits>(inc, b)

// Multiplies two bit strings
mul(a: Bits, b: Bits): Bits
  id(mul.go(add(a), b))

// Helper function
mul.go(f: Bits -> Bits, bs: Bits): Bits
  case bs:
  with go:_ = mul.go;
  | bn => bn;
  | b0 => b0(go(f, bs.pred));
  | b1 => f(b0(go(f, bs.pred)));

// Just a test. Run via JS with `fmio test`, or optimally with `fmopt test`.
test: Bits
  mul(b1(b0(b0(b1(b0(bn))))), b0(b1(b0(b0(b0(bn))))))
